@charset "utf-8";
@use "sass:math";

// /* media query */ 
@mixin responsive($breakpoint: null) {
  $min: map-get($breakpoints, $breakpoint);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content; // 기본적으로 모든 화면 크기에 적용
  }
}
// @include responsive(lg) {
//   @content;
// }
  
@mixin clearfix() {
  &::after {
    display: table;
    clear: both;
    content: "";
  }
} // 사용법 @include clearfix;

@mixin ellisis($line: 1) {
  @if ($line == 1) {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden
  } @else {
    display: -webkit-box;
    word-wrap: break-word;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
    overflow: hidden
  }
}

// /* ########## positions ########## */
@mixin center($position: absolute, $axis: both) {
  position: $position;
  
  @if $axis == both {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $axis == horizontal {
    left: 50%;
    transform: translateX(-50%);
  } @else if $axis == vertical {
    top: 50%;
    transform: translateY(-50%);
  }
}
// @include center(fixed, horizontal); // 수평 중앙 정렬, 고정 위치
// @include center(absolute, both); // 수평 및 수직 중앙 정렬, 상대 위치

@mixin scrollbars($size, $foreground-color, $background-color: mix($forground-color, white, 50%)) {
  ::-webkit-scrollbar {
    width: $size;
    height: $size
  }
  ::-webkit-scrollbar-thumb {
    border-radius: 100px;
    background: $foreground-color
  }
  ::-webkit-scrollbar-track {
    border-radius: 100px;
    background: $background-color
  }
  body {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color
  }
} //@include scrollbars(.5em, slategray);

@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}
// /* ########## svg color ########## */
@mixin recolor($color: #000, $opacity: 1) {
  $r:   calc(red($color) / 255);
  $g: calc(green($color) / 255);
  $b:  calc(blue($color) / 255);
  $a: $opacity;
  
  // grayscale fallback if SVG from data url is not supported
  $lightness: lightness($color);
  filter: saturate(0%) brightness(0%) invert($lightness) opacity($opacity);
  
  // color filter
  $svg-filter-id: "recolor";
  filter: url('data:image/svg+xml;utf8,\
    <svg xmlns="http://www.w3.org/2000/svg">\
    <filter id="#{$svg-filter-id}" color-interpolation-filters="sRGB">\
      <feColorMatrix type="matrix" values="\
      0 0 0 0 #{$r}\
      0 0 0 0 #{$g}\
      0 0 0 0 #{$b}\
      0 0 0 #{$a} 0\
      "/>\
    </filter>\
    </svg>\
    ##{$svg-filter-id}');
} // @include recolor($pointColor, 1);

// /* ########## preifx ########## */
@mixin opacity($value) {
  opacity: $value;

  // IE 8 및 그 이전 버전용 접두사
  $IEValue: $value * 100;
  filter: alpha(opacity=$IEValue);
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=$IEValue)";
} // Chrome 4.0 / IE, Edge 9.0 / Firefox 2.0 / Safari 3.1 / Opera 9.0

@mixin placeholder {
  $placeholders: ":-webkit-input-" ":-moz-" "-moz-" "-ms-input-" ":";
  @each $prefix in $placeholders {
    &:#{$prefix}placeholder {
      @content;
    }
  }
} // Chrome 10.0 / IE, Edge 10.0 / Firefox 4.0 / Safari 5.0 / Opera 11.0

@mixin appearance($appearance) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}appearance: $appearance
  }
}

@mixin user-select($select) {
  @each $prefix in -webkit-, -ms-, '' {
    #{$prefix}user-select: $select
  }
} // Chrome 54.0 / IE, Edge 79.0 / Firefox 69.0 / Safari 3.1 / Opera 41.0

@mixin box-sizing($box-sizing) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}box-sizing: $box-sizing
  }
} // Chrome 10.0 / IE, Edge 8.0 / Firefox 29.0 / Safari 5.1 / Opera 9.5

@mixin box-shadow($args...) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}box-shadow: $args
  }
} //@include box-shadow(2px 6px 10px #999, 0px 4px 5px #666);
// Chrome 10.0 / IE, Edge 9.0 / Firefox 4.0 / Safari 5 / Opera 10.5

// /* ########## linear-gradient ########## */
@mixin linear-gradient($deg, $colors...) {
  background: -webkit-linear-gradient($deg, $colors); // safai5.1+, chrome10+
  background:    -moz-linear-gradient($deg, $colors); // ff3.6+
  background:     -ms-linear-gradient($deg, $colors); // ie10+
  background:      -o-linear-gradient($deg, $colors); // opera 11.10+
  background:         linear-gradient($deg, $colors); // w3c
}
// @include linear-gradient(red 0%, blue 100%);
// @include linear-gradient(45deg, red 0%, blue 100%); // 45도 각도의 그라데이션
// Chrome 26 / IE, Edge 10 / Firefox 16 / Safari 6.1 / Opera 12.1
// two-positon clor stops => Chrome 71 / IE, Edge 79 / Firefox 64 / Safari 12.1 / Opera 58

@mixin radial-gradient($shape, $colors...) {
  background: -webkit-radial-gradient($shape, $colors);
  background:    -moz-radial-gradient($shape, $colors);
  background:     -ms-radial-gradient($shape, $colors);
  background:      -o-radial-gradient($shape, $colors);
  background:         radial-gradient($shape, $colors);
} // @include radial-gradient(#ff0000, 0%, #0000ff, 100%)
// shape: eclipse(default), circle / 50% 50% at 50% 50%,
// size: fathest-coner(default), closest-side, closest-coner, fathest-side
// Chrome 26 / IE, Edge 10 / Firefox 16 / Safari 6.1 / Opera 12.1
// two-positon clor stops => Chrome 71 / IE, Edge 79 / Firefox 64 / Safari 12.1 / Opera 58

@mixin animation($animations...) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}animation: $animations
  }
} // Chrome 43 / IE, Edge 10 / Firefox 16 / Safari 9 / Opera 30

@mixin transition($x...) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition: $x
  }
} // Chrome 26 / IE, Edge 12 / Firefox 16 / Safari 9 / Opera 12.1
@mixin transition-time($time) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-time: $time
  }
}
@mixin transition-origin($origin) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-origin: $origin
  }
}
@mixin transition-duration($dration) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-duration: $duration
  }
}
@mixin transition-timing-function($x) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-timing-function: $x
  }
}
@mixin transition-property($property...) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-property: $property
  }
}

@mixin transforms($transforms...) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transform: $transforms
  }
} //@include transform(scale(1.5) rotate(0));
// Chrome 36 / IE, Edge 12 / Firefox 16 / Safari 9 / Opera 23
@mixin transform($transform) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transform: $transform
  }
}
@mixin transform-origin($origin) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}transform-origin: $origin
  }
}
//rotate
@mixin rotate($deg) {
  @include transform(rotate($deg));
}
//scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
@mixin scaleX($scaleX) {
  @include transform(scaleX($scaleX));
}
@mixin scaleY($scaleY) {
  @include transform(scaleY($scaleY));
}
//translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}
@mixin translateX($x) {
  @include transform(translateX($x));
}
@mixin translateY($y) {
  @include transform(translateY($y));
}
//skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin ie-only() {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content
  }
}
